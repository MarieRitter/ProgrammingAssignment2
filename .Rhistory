correlations <- matrix(0, nrow=101, ncol=3)
colnames(correlations) <- c("a(base-risky)*arec(base-risky)", "phi(base-noisy)*phirec(base-noisy)", "arec*phirec")
# a
for (i in 1:100) {
correlations[i,1] <- round(cor((output[41:80, 1, i]-output[1:40 , 1, i]), (output[41:80, 2, i]-output[1:40 , 2, i]), use="pairwise.complete.obs"), 3)
}
correlations[101, 1] <- mean(correlations[,1])
# phi
for (i in 1:100) {
correlations[i,2] <- round(cor((output[81:120, 7, i]-output[1:40 , 7, i]), (output[81:120, 8, i]-output[1:40 , 8, i]), use="pairwise.complete.obs"), 3)
}
correlations[101, 2] <- mean(correlations[,2])
# arec * phirec
for (i in 1:100) {
correlations[i, 3] <- round(cor(output[, 2, i], output[, 7, i], use = "pairwise.complete.obs"), 3)
}
View(correlations)
# correlation real difference vs. estimate difference
correlations <- matrix(nrow=101, ncol=3)
colnames(correlations) <- c("a(base-risky)*arec(base-risky)", "phi(base-noisy)*phirec(base-noisy)", "arec*phirec")
# a
for (i in 1:100) {
correlations[i,1] <- round(cor((output[41:80, 1, i]-output[1:40 , 1, i]), (output[41:80, 2, i]-output[1:40 , 2, i]), use="pairwise.complete.obs"), 3)
}
correlations[101, 1] <- mean(correlations[,1])
View(correlations)
# phi
for (i in 1:100) {
correlations[i,2] <- round(cor((output[81:120, 7, i]-output[1:40 , 7, i]), (output[81:120, 8, i]-output[1:40 , 8, i]), use="pairwise.complete.obs"), 3)
}
correlations[101, 2] <- mean(correlations[,2])
# arec * phirec
for (i in 1:100) {
correlations[i, 3] <- round(cor(output[, 2, i], output[, 7, i], use = "pairwise.complete.obs"), 3)
}
correlations[101, 3] <- mean(correlations[,3])
View(correlations)
correlations[101, 1] <- mean(correlations[,1])
View(correlations)
correlations[101, 1] <- sum(correlations[,1])/100
View(correlations)
correlations[101, 1] <- sum(correlations[ , 1])
View(correlations)
correlations[101, 1] <- round(mean(correlations[ , 1]), 3)
View(correlations)
correlations[101, 1] <- mean(correlations[1:100,1])
View(correlations)
correlations[101, 2] <- mean(correlations[1:100,2])
correlations[101, 3] <- mean(correlations[1:100,3])
View(correlations)
# correlation real difference vs. estimate difference
correlations <- matrix(nrow=101, ncol=3)
colnames(correlations) <- c("a(base-risky)*arec(base-risky)", "phi(base-noisy)*phirec(base-noisy)", "arec*phirec")
# a
for (i in 1:100) {
correlations[i,1] <- round(cor((output[41:80, 1, i]-output[1:40 , 1, i]), (output[41:80, 2, i]-output[1:40 , 2, i]), use="pairwise.complete.obs"), 3)
}
correlations[101, 1] <- mean(correlations[1:100,1])
# graphical a
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot((output[41:80, 1, i]-output[1:40 , 1, i]), (output[41:80, 2, i]-output[1:40 , 2, i]), ylim=c(-0.5,1))
abline(a=0, b=1)
}
# phi
for (i in 1:100) {
correlations[i,2] <- round(cor((output[81:120, 7, i]-output[1:40 , 7, i]), (output[81:120, 8, i]-output[1:40 , 8, i]), use="pairwise.complete.obs"), 3)
}
correlations[101, 2] <- mean(correlations[1:100,2])
# graphical phi
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot((output[81:120, 7, i]-output[1:40 , 7, i]), (output[81:120, 8, i]-output[1:40 , 8, i]), ylim=c(-2,2))
abline(a=0, b=1)
}
# arec * phirec
for (i in 1:100) {
correlations[i, 3] <- round(cor(output[, 2, i], output[, 7, i], use = "pairwise.complete.obs"), 3)
}
correlations[101, 3] <- mean(correlations[1:100,3])
View(correlations)
correlations <- matrix(NA, nrow=101, ncol=3)
colnames(correlations) <- c("a(base-risky)*arec(base-risky)", "phi(base-noisy)*phirec(base-noisy)", "arec*phirec")
View(correlations)
# a
for (i in 1:100) {
correlations[i,1] <- round(cor((output[41:80, 1, i]-output[1:40 , 1, i]), (output[41:80, 2, i]-output[1:40 , 2, i]), use="pairwise.complete.obs"), 3)
}
correlations[101, 1] <- mean(correlations[1:100,1])
# phi
for (i in 1:100) {
correlations[i,2] <- round(cor((output[81:120, 7, i]-output[1:40 , 7, i]), (output[81:120, 8, i]-output[1:40 , 8, i]), use="pairwise.complete.obs"), 3)
}
correlations[101, 2] <- mean(correlations[1:100,2])
# arec * phirec
for (i in 1:100) {
correlations[i, 3] <- round(cor(output[, 2, i], output[, 7, i], use = "pairwise.complete.obs"), 3)
}
correlations[101, 3] <- mean(correlations[1:100,3])
View(correlations)
# correlation real difference vs. estimate difference
correlations <- matrix(NA, nrow=101, ncol=3)
colnames(correlations) <- c("a(base-risky)*arec(base-risky)", "phi(base-noisy)*phirec(base-noisy)", "arec*phirec")
# a
for (i in 1:100) {
correlations[i,1] <- round(cor((output[41:80, 1, i]-output[1:40 , 1, i]), (output[41:80, 2, i]-output[1:40 , 2, i]), use="pairwise.complete.obs"), 3)
}
correlations[101, 1] <- round(mean(correlations[1:100,1]),3)
# graphical a
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot((output[41:80, 1, i]-output[1:40 , 1, i]), (output[41:80, 2, i]-output[1:40 , 2, i]), ylim=c(-0.5,1))
abline(a=0, b=1)
}
# phi
for (i in 1:100) {
correlations[i,2] <- round(cor((output[81:120, 7, i]-output[1:40 , 7, i]), (output[81:120, 8, i]-output[1:40 , 8, i]), use="pairwise.complete.obs"), 3)
}
correlations[101, 2] <- round(mean(correlations[1:100,2]),3)
# graphical phi
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot((output[81:120, 7, i]-output[1:40 , 7, i]), (output[81:120, 8, i]-output[1:40 , 8, i]), ylim=c(-2,2))
abline(a=0, b=1)
}
# arec * phirec
for (i in 1:100) {
correlations[i, 3] <- round(cor(output[, 2, i], output[, 7, i], use = "pairwise.complete.obs"), 3)
}
correlations[101, 3] <- round(mean(correlations[1:100,3]),3)
View(correlations)
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot(output[, 2, i], output[, 7, i])
abline(lm)
}
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot(output[, 2, i], output[, 7, i])
}
?plot
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot((output[41:80, 1, i]-output[1:40 , 1, i]), (output[41:80, 2, i]-output[1:40 , 2, i]), ylim=c(-0.5,1), xlab="a risky - a base", ylab="arec risky - arec base")
abline(a=0, b=1)
}
# graphical phi
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot((output[81:120, 7, i]-output[1:40 , 7, i]), (output[81:120, 8, i]-output[1:40 , 8, i]), ylim=c(-2,2), xlab="phi noisy-phi base", ylab="phirec noisy - phirec base")
abline(a=0, b=1)
}
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot(output[, 2, i], output[, 7, i], xlab="alpha recovered", ylab="phi recovered")
}
?abline
??lineofbestfit
??line of best fit
help(line of best fit)
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot(output[, 2, i], output[, 7, i], xlab="alpha recovered", ylab="phi recovered")
abline(lm(output[, 7, i] ~ output[, 2, i]))
}
# alpha vs. alpha rec
X11()
par(mfrow=c(3,4))
for (i in 1:12) {
plot(output[, 1, i], output[, 2, i], ylim=c(0, 1.5), xlab="a", ylab="arec")
abline(a=0, b=1)
}
# y vs. y rec
X11()
par(mfrow=c(3,4))
for (i in 1:12) {
plot(output[, 4, i], output[, 5, i], ylim=c(0,1.25), xlab="y", ylab="yrec")
abline(a=0, b=1)
}
# phi vs. phi rec
X11()
par(mfrow=c(3,4))
for (i in 1:12) {
plot(output[, 7, i], output[, 8, i], ylim=c(0,3.5), xlab="phi", ylab="phirec")
abline(a=0, b=1)
}
# t-tests
ttests <- matrix(0, nrow=101, ncol=12)
colnames(ttests) <- c("abase", "arisky", "pa(base|risky)", "abase", "anoisy", "pa(base|noisy)", "phibase", "phirisky", "pphi(base|risky)", "phibase", "phinoisy", "pphi(base|noisy)")
#arecbase vs. arecrisky
for (i in 1:100) {
t <- t.test(output[1:40, 2, i], output[41:80, 2, i])
ttests[i,c(1,2)] <- t$estimate
ttests[i, 3] <- round(t$p.value, 3)
}
ttests[101, 3] <- round(length(which(ttests[1:100, 3] < 0.05))/100, 3)
View(ttests)
# arecbase vs. arecnoisy
for (i in 1:100) {
t <- t.test(output[1:40, 2, i], output[81:120, 2, i])
ttests[i,c(4,5)] <- t$estimate
ttests[i, 6] <- round(t$p.value, 3)
}
ttests[101, 6] <- round(length(which(ttests[1:100, 6] < 0.05))/100, 3)
View(ttests)
#phirecbase vs. phirecnoisy
for (i in 1:100) {
t <- t.test(output[1:40, 7, i], output[81:120, 7, i])
ttests[i,c(7,8)] <- t$estimate
ttests[i, 9] <- round(t$p.value, 3)
}
ttests[101, 9] <- round(length(which(ttests[1:100, 6] < 0.05))/100, 3)
View(ttests)
# t-tests
ttests <- matrix(0, nrow=101, ncol=12)
colnames(ttests) <- c("abase", "arisky", "pa(base|risky)", "abase", "anoisy", "pa(base|noisy)", "phibase", "phirisky", "pphi(base|risky)", "phibase", "phinoisy", "pphi(base|noisy)")
#arecbase vs. arecrisky
for (i in 1:100) {
t <- t.test(output[1:40, 2, i], output[41:80, 2, i])
ttests[i,c(1,2)] <- t$estimate
ttests[i, 3] <- round(t$p.value, 3)
}
ttests[101, 3] <- round(length(which(ttests[1:100, 3] < 0.05))/100, 3)
# arecbase vs. arecnoisy
for (i in 1:100) {
t <- t.test(output[1:40, 2, i], output[81:120, 2, i])
ttests[i,c(4,5)] <- t$estimate
ttests[i, 6] <- round(t$p.value, 3)
}
ttests[101, 6] <- round(length(which(ttests[1:100, 6] < 0.05))/100, 3)
#phirecbase vs. phirecrisky
for (i in 1:100) {
t <- t.test(output[1:40, 7, i], output[41:80, 7, i])
ttests[i,c(7,8)] <- t$estimate
ttests[i, 9] <- round(t$p.value, 3)
}
ttests[101, 9] <- round(length(which(ttests[1:100, 9] < 0.05))/100, 3)
#phirecbase vs. phirecnoisy
for (i in 1:100) {
t <- t.test(output[1:40, 7, i], output[81:120, 7, i])
ttests[i,c(10,11)] <- t$estimate
ttests[i, 12] <- round(t$p.value, 3)
}
ttests[101, 12] <- round(length(which(ttests[1:100, 12] < 0.05))/100, 3)
View(ttests)
load("~/Dokumente/Professional/Internship/simulation_complete.RData")
# correlation real difference vs. estimate difference
correlations <- matrix(NA, nrow=101, ncol=3)
colnames(correlations) <- c("a(base-risky)*arec(base-risky)", "phi(base-noisy)*phirec(base-noisy)", "arec*phirec")
# a
for (i in 1:100) {
correlations[i,1] <- round(cor((output[41:80, 1, i]-output[1:40 , 1, i]), (output[41:80, 2, i]-output[1:40 , 2, i]), use="pairwise.complete.obs"), 3)
}
correlations[101, 1] <- round(mean(correlations[1:100,1]),3)
# phi
for (i in 1:100) {
correlations[i,2] <- round(cor((output[81:120, 7, i]-output[1:40 , 7, i]), (output[81:120, 8, i]-output[1:40 , 8, i]), use="pairwise.complete.obs"), 3)
}
correlations[101, 2] <- round(mean(correlations[1:100,2]),3)
# arec * phirec
for (i in 1:100) {
correlations[i, 3] <- round(cor(output[, 2, i], output[, 7, i], use = "pairwise.complete.obs"), 3)
}
correlations[101, 3] <- round(mean(correlations[1:100,3]),3)
# graphical arec*phirec
# t-tests
ttests <- matrix(0, nrow=101, ncol=12)
colnames(ttests) <- c("abase", "arisky", "pa(base|risky)", "abase", "anoisy", "pa(base|noisy)", "phibase", "phirisky", "pphi(base|risky)", "phibase", "phinoisy", "pphi(base|noisy)")
#arecbase vs. arecrisky
for (i in 1:100) {
t <- t.test(output[1:40, 2, i], output[41:80, 2, i])
ttests[i,c(1,2)] <- t$estimate
ttests[i, 3] <- round(t$p.value, 3)
}
ttests[101, 3] <- round(length(which(ttests[1:100, 3] < 0.05))/100, 3)
# arecbase vs. arecnoisy
for (i in 1:100) {
t <- t.test(output[1:40, 2, i], output[81:120, 2, i])
ttests[i,c(4,5)] <- t$estimate
ttests[i, 6] <- round(t$p.value, 3)
}
ttests[101, 6] <- round(length(which(ttests[1:100, 6] < 0.05))/100, 3)
#phirecbase vs. phirecrisky
for (i in 1:100) {
t <- t.test(output[1:40, 7, i], output[41:80, 7, i])
ttests[i,c(7,8)] <- t$estimate
ttests[i, 9] <- round(t$p.value, 3)
}
ttests[101, 9] <- round(length(which(ttests[1:100, 9] < 0.05))/100, 3)
#phirecbase vs. phirecnoisy
for (i in 1:100) {
t <- t.test(output[1:40, 7, i], output[81:120, 7, i])
ttests[i,c(10,11)] <- t$estimate
ttests[i, 12] <- round(t$p.value, 3)
}
ttests[101, 12] <- round(length(which(ttests[1:100, 12] < 0.05))/100, 3)
View(ttests)
View(correlations)
colnames(output)
#phirecbase vs. phirecrisky
for (i in 1:100) {
t <- t.test(output[1:40, 8, i], output[41:80, 8, i])
ttests[i,c(7,8)] <- t$estimate
ttests[i, 9] <- round(t$p.value, 3)
}
ttests[101, 9] <- round(length(which(ttests[1:100, 9] < 0.05))/100, 3)
#phirecbase vs. phirecnoisy
for (i in 1:100) {
t <- t.test(output[1:40, 8, i], output[81:120, 8, i])
ttests[i,c(10,11)] <- t$estimate
ttests[i, 12] <- round(t$p.value, 3)
}
ttests[101, 12] <- round(length(which(ttests[1:100, 12] < 0.05))/100, 3)
View(ttests)
# arec * phirec
for (i in 1:100) {
correlations[i, 3] <- round(cor(output[, 2, i], output[, 8, i], use = "pairwise.complete.obs"), 3)
}
correlations[101, 3] <- round(mean(correlations[1:100,3]),3)
View(correlations)
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot(output[, 2, i], output[, 8, i], xlab="alpha recovered", ylab="phi recovered")
}
# graphical phi
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot((output[81:120, 7, i]-output[1:40 , 7, i]), (output[81:120, 8, i]-output[1:40 , 8, i]), ylim=c(-2,2), xlab="phi noisy-phi base", ylab="phirec noisy - phirec base")
abline(a=0, b=1)
}
# graphical phi
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot((output[81:120, 7, i]-output[1:40 , 7, i]), (output[81:120, 8, i]-output[1:40 , 8, i]), xlab="phi noisy-phi base", ylab="phirec noisy - phirec base")
abline(a=0, b=1)
}
# graphical a
X11()
par(mfrow=c(3,5))
for (i in 1:15) {
plot((output[41:80, 1, i]-output[1:40 , 1, i]), (output[41:80, 2, i]-output[1:40 , 2, i]), ylim=c(-0.5,1), xlab="a risky - a base", ylab="arec risky - arec base")
abline(a=0, b=1)
}
colnames(output)
setwd(~/Dokumente/Uni/R/ProgrammingAssignment2/ProgrammingAssignment2)
setwd("~/Dokumente/Uni/R/ProgrammingAssignment2/ProgrammingAssignment2"")
""
setwd("~/Dokumente/Uni/R/ProgrammingAssignment2/ProgrammingAssignment2")
rm(list = ös())
rm(list = ls())
setwd("~/Dokumente/Uni/R/ProgrammingAssignment2/ProgrammingAssignment2")
setwd("~/Dokumente/Uni/R/ProgrammingAssignment2")
getwd()
setwd("~/Dokumente")
setwd("~/Dokumente/Uni")
setwd("~/Dokumente/Uni/Courses")
setwd("~/Dokumente/Uni/Courses/R")
setwd("~/Dokumente/Uni/Courses/R/ProgrammingAssignment2")
setwd("~/Dokumente/Uni/Courses/R/ProgrammingAssignment2/ProgrammingAssignment2")
?read.table
read.table("test.csv", sep=";")
read.table("test.csv", sep=";")
test <- read.table("test.csv", sep=";")
x <- test
rm(test)
y
z <- solve(x
)
x * z
rm(z)
## These functions create an object in the cache that is the inverse of a matrix x
## Useful especially for large matrices. Saves computation time.
## After the inverse matrix is stored in the cache it can be retrieved with the 2nd function.
## This function computes the inverse matrix of matrix x and stores it in the cache.
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL # create object that will contain inverse
set <- funtion(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve # actual computation
getinverse <- function() inverse # print inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse) # define list of functions
}
## This function checks if the inverse is already stored in the cache and - in this case - retrieves it.
## If not, it computes it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse() # open funtion in function list
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
} # check if inverse is already cached
data <- x$get() # else get the data
inverse <- solve(data, ...) # compute inverse
x$setinverse(inverse) # save inverse
inverse # print
}
inverse
y <- x
## These functions create an object in the cache that is the inverse of a matrix x
## Useful especially for large matrices. Saves computation time.
## After the inverse matrix is stored in the cache it can be retrieved with the 2nd function.
## This function computes the inverse matrix of matrix x and stores it in the cache.
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL # create object that will contain inverse
set <- funtion(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve # actual computation
getinverse <- function() inverse # print inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse) # define list of functions
}
## This function checks if the inverse is already stored in the cache and - in this case - retrieves it.
## If not, it computes it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse() # open funtion in function list
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
} # check if inverse is already cached
data <- x$get() # else get the data
inverse <- solve(data, ...) # compute inverse
x$setinverse(inverse) # save inverse
inverse # print
}
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL # create object that will contain inverse
set <- funtion(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve # actual computation
getinverse <- function() inverse # print inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse) # define list of functions
}
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL # create object that will contain inverse
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve # actual computation
getinverse <- function() inverse # print inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse) # define list of functions
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse() # open funtion in function list
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
} # check if inverse is already cached
data <- x$get() # else get the data
inverse <- solve(data, ...) # compute inverse
x$setinverse(inverse) # save inverse
inverse # print
}
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL # create object that will contain inverse
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve # actual computation
getinverse <- function() inverse # print inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse) # define list of functions
}
## This function checks if the inverse is already stored in the cache and - in this case - retrieves it.
## If not, it computes it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse() # open funtion in function list
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
} # check if inverse is already cached
data <- x$get() # else get the data
inverse <- solve(data, ...) # compute inverse
x$setinverse(inverse) # save inverse
return(inverse) # print
}
